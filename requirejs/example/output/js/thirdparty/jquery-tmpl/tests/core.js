function test_handler(a,b,c){console.log(arguments);var d=$.isFunction(c)&&c.prototype instanceof Error;d&&b instanceof c?ok(b instanceof c,a):same(b,c,a)}var testData={one:"first",two:"second",v:"test",arr:["AA","BB","CC"],dict:{leovinus:"this",scraliontis:"that",brobostigon:"other"},fun:function(){return"RETURNED"},html:"<a>"},R=function(a,b){try{return jQuery.tmpl(a,b).text()}catch(c){if(typeof c==="string")return"ERROR: "+c;return c}};jQuery.tmpl.tag.syntax_error={open:"throw SyntaxError('test syntax error');"},jQuery.tmpl.tag.reference_error={open:"throw ReferenceError('test reference error');"},jQuery.tmpl.tag.type_error={open:"throw TypeError('test type error');"},module("Basics"),test("Basic Function",function(){test_handler("plain text passes through untouched",R("lorem ipsum",testData),"lorem ipsum"),test_handler("simple variable output",R("${ one }",testData),"first"),test_handler("multi word variable tag",R("${ a b c }}"),SyntaxError),test_handler("_ (underscore) cannot by used by data",R("${ _ }",{_:"foo"}),TypeError),test_handler("$ cannot be used by data",R("${ $ }",{$:"foo"}),TypeError)}),test("Error Passing",function(){test_handler("syntax",R("{{syntax_error }}",testData),SyntaxError),test_handler("reference",R("{{reference_error }}",testData),ReferenceError),test_handler("type",R("{{type_error }}",testData),TypeError)}),test("Newlines / Escaping",function(){test_handler("newlines do not kill tags",R("${\n \none\n }",testData),"first")}),test("Empty Tag",function(){}),test("Incorrect Nesting",function(){test_handler("default",R("{{if 1}}{{if 1}}{{/if}}",testData),SyntaxError),test_handler("extra /if",R("{{if 1}}{{/if}}{{/if}}",testData),SyntaxError),test_handler("but terminated",R("{{if 1}}{{each arr}}{{/if}}{{/each}}",testData),SyntaxError)}),test("Ignore Malformed Tags",function(){test_handler("a {{one } b",R("a {{one } b",testData),"a {{one } b"),test_handler("first} {{second }",R("${ one }} {{two }",testData),"first} {{two }"),test_handler("{{one }",R("{{one }",testData),"{{one }")}),test("Reserved Words",function(){test_handler("Disallow function operator",R("${ function(){} }",{}),SyntaxError),test_handler("Disallow return",R("${ return a }",{a:1}),SyntaxError),test_handler("Disallow for",R("${ for a }",{a:1}),SyntaxError),test_handler("Disallow do/while",R("${ do{ a }while(a) }",{a:1}),SyntaxError),test_handler("Disallow if",R("${ if a }",{a:1}),SyntaxError),test_handler("Disallow try/catch",R("${ try{b.s}catch(e){} }",{a:1}),SyntaxError),test_handler("Disallow return keyword",R("${ return a }",{a:1}),SyntaxError),test_handler("Disallow with keyword",R("${ with (s) }",{a:1}),SyntaxError),test_handler("Disallow throw keyword",R('${ throw "foo" }',{a:1}),SyntaxError)}),test("Caching via $.template() and .template()",function(){$.template("nametmpl","<span>name: ${ v }</span>"),test_handler("using a named template",$.tmpl("nametmpl",testData).text(),"name: test");var a=$("<span>name: ${ v }</span>");a.template("nametmpl2"),test_handler("using a named template created from a node",$.tmpl("nametmpl2",testData).text(),"name: test")}),test("Bracketed Accessors",function(){test_handler('foo["bar"]',R('${ foo["bar"] }',{foo:{bar:"baz"}}),"baz"),test_handler("foo['bar']",R("${ foo['bar'] }",{foo:{bar:"baz"}}),"baz")}),test("Escaping",function(){}),test("Comments",function(){test_handler("comments are removed",R("A{{! comments test }}B",testData),"AB"),test_handler("comments are removed (2)",R("{{! inky }}foo{{! blinky }}",testData),"foo");return}),test("Variables",function(){test_handler("variable replacement",R("${ one }",testData),"first"),test_handler("many variables work",R("${ one }/${ two }",testData),"first/second"),test_handler("alternative variable syntax",R("${ one }",testData),"first"),test_handler("many variables work with alt syntax",R("${ one }/${ two }",testData),"first/second"),test_handler("basic string output (double)",R('${ "string" }',testData),"string"),test_handler("basic string output (single)",R("${ 'string' }",testData),"string"),test_handler("string quote escapes (double)",R('${ "str\\"i\\"ng" }',testData),'str"i"ng'),test_handler("string quote escapes (single)",R("${ 'str\\'i\\'ng' }",testData),"str'i'ng"),test_handler("empty variable tag (with tabs whitespace)",R("{{=\t\t}}","self"),"self"),test_handler("empty variable tag",R("{{= }}","self"),"self"),test_handler("empty variable tag (with space)",R("{{=}}","self"),"self"),test_handler("variable lookup error suppression",R("${ is_undefined }",testData),""),test_handler("variable and text (1)",R("A${ one }",testData),"Afirst"),test_handler("variable and text (2)",R("${ one }B",testData),"firstB"),test_handler("variable and text (3)",R("A${ one }B",testData),"AfirstB"),test_handler("lookups work for submembers",R("${ a.b.c }",{a:{b:{c:"abc"}}}),"abc"),test_handler("error suppression works for submembers",R("${ a.b.c }",{a:{b:{c:"abc"}}}),"abc"),test_handler("functions can be called with in tags",R("${ foo() }",{foo:function(a){return"bar"}}),"bar"),test_handler("functions pass strings correctly",R('${ foo("bar") }',{foo:function(a){return a}}),"bar"),test_handler("functions pass arguments correctly",R("${ foo(bar) }",{foo:function(a){return a},bar:"baz"}),"baz");var a={toString:function(){return"S"},toValue:function(){return"V"}};test_handler("variables use toString, not toValue",R("${ foo }",{foo:a}),"S"),test_handler("comma passes variables correctly",R("${ dot,dot,comma,dash }",{dot:".",comma:",",dash:"-"}),"-"),test_handler("variable gets called if it is callable",R("${ fun }",testData),"RETURNED"),test_handler("last variable in sequence gets called if it is callable",R("${ obj.fun }",{obj:testData}),"RETURNED");var a={foo:function(){return{bar:function(){return"BAZ"}}}};test_handler("member functions in a sequence don't get called",R("${ foo.bar }",a),"")}),test("Falsy Values",function(){test_handler("(0)",R("${ 0 }"),"0"),test_handler("(false)",R("${ false }"),"false"),test_handler("(null)",R("${ zero }"),""),test_handler("(undefined)",R("${ undefined }"),""),test_handler('("")',R('${ "" }'),""),test_handler("('')",R("${ '' }"),"")}),test("Falsy Lookups",function(){test_handler("(false)",R("${ zero }",{zero:0}),"0"),test_handler("(false)",R("${ zero }",{zero:!1}),"false"),test_handler("(null)",R("${ zero }",{zero:null}),""),test_handler("(undefined)",R("${ zero }",{zero:undefined}),""),test_handler("('')",R("${ zero }",{zero:""}),"")}),test("Javascript Operations",function(){test_handler("string concatination",R('${ one + "foo" }',testData),"firstfoo"),test_handler("adding",R("${ 1 + 5 }",testData),"6"),test_handler("subtracting",R("${ 9 - 5 }",testData),"4"),test_handler("modulo",R("${ 5 % 2 }",testData),"1"),test_handler("unary minus",R("${ -n }",{n:10}),"-10"),test_handler("unary plus",R("${ +n }",{n:"10"}),"10"),test_handler("in operator",R('${ "bar" in foo }',{foo:{bar:"baz"}}),"true"),test_handler("instanceof operator",R("${ foo instanceof Date }",{foo:new Date}),"true"),test_handler("typeof operator",R('${ typeof "str" }',{}),"string"),test_handler("bitwise AND",R("${ n & 1 }",{n:5}),"1"),test_handler("bitwise OR",R("${ n | 1 }",{n:4}),"5"),test_handler("bitwise XOR",R("${ n ^ 1 }",{n:5}),"4"),test_handler("bitwise NOT",R("${ ~n }",{n:5}),"-6"),test_handler("left shift",R("${ n << 1 }",{n:5}),"10"),test_handler("right shift",R("${ n >> 1 }",{n:5}),"2"),test_handler("zero-fill right shift",R("${ n >>> 1 }",{n:5}),"2"),test_handler("comparing ==",R("${ 1 == 5 }",testData),"false"),test_handler("comparing !=",R("${ 1 != 5 }",testData),"true"),test_handler("comparing ===",R("${ 5 === 5 }",testData),"true"),test_handler("comparing !==",R("${ 5 !== 5 }",testData),"false"),test_handler("comparing >=",R("${ 1 >= 5 }",testData),"false"),test_handler("comparing >",R("${ 1 > 5 }",testData),"false"),test_handler("comparing <=",R("${ 1 <= 5 }",testData),"true"),test_handler("comparing <",R("${ 1 < 5 }",testData),"true"),test_handler("Logical OR",R('${ zero || "FALSY" }',{zero:0}),"FALSY"),test_handler("Logical AND",R('${ zero && "TRUEY" }',{zero:1}),"TRUEY"),test_handler("Conditional Operator",R('${ zero ? "zero" : "other" }',{zero:1}),"zero"),test_handler("Unary logical NOT",R("${ !zero }",{zero:1}),"false"),test_handler("Single-Quoted Strings",R("${ 'test' }",{}),"test"),test_handler("Single-Quoted Comparison",R("${ 'test' == testvar }",{testvar:"test"}),"true")}),test("Disallowed / Illegal",function(){}),module("Commands"),test("Create New Command",function(){$.getText=function(a){return a.toUpperCase()},$.tmpl.tag.trans={open:"_.push($.getText($1));"},test_handler("creating new command works",R('{{trans "translate" }}'),"TRANSLATE"),$.tmpl.tag._=$.tmpl.tag.trans,test_handler("_ can by assigned a command",R('{{_ "translate" }}',{}),"TRANSLATE"),delete $.getText,delete $.tmpl.tag.trans,delete $.tmpl.tag._}),test("Each {{ each }}",function(){test_handler("loop",R("{{each arr}}${ $index }:${ this }/{{/each}}",testData),"0:AA/1:BB/2:CC/"),test_handler("loop",R("{{each arr}}${ $index }:${ $value }/{{/each}}",testData),"0:AA/1:BB/2:CC/"),test_handler("loop",R("{{each(i, item) arr}}${ i }:${ item }/{{/each }}",testData),"0:AA/1:BB/2:CC/"),test_handler("loop",R("{{each arr}}${ $index }:${ this }/{{/each }}",testData),"0:AA/1:BB/2:CC/"),test_handler("errors are passed back correctly (syntax)",R("{{each arr}}${ $i }{{syntax_error}}{{/each}}",testData),SyntaxError),test_handler("errors are passed back correctly (reference)",R("{{each arr}}${ $i }{{reference_error}}{{/each}}",testData),ReferenceError),test_handler("errors are passed back correctly (type)",R("{{each arr}}${ $i }{{type_error}}{{/each}}",testData),TypeError)}),test("{{if}} and {{else}}",function(){test_handler("if:true",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:!0}),"TRUE"),test_handler("if:false",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:!1}),"FALSE"),test_handler("if:null",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:null}),"FALSE"),test_handler("if:undefined",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:undefined}),"FALSE"),test_handler("if:[]",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:{}}),"TRUE"),test_handler("if:{}",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:[]}),"TRUE"),test_handler("if:''",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:""}),"FALSE"),test_handler("if:A",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:"A"}),"TRUE"),test_handler("if:0",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:0}),"FALSE"),test_handler("if:1",R("{{if a}}TRUE{{else}}FALSE{{/if}}",{a:1}),"TRUE"),test_handler("/if ignores following text",R("{{if a}}TRUE{{else}}FALSE{{/if a}}",{a:1}),"TRUE"),test_handler("errors are passed back correctly (syntax)",R("{{if true}}{{syntax_error}}{{/if}}",testData),SyntaxError),test_handler("errors are passed back correctly (reference)",R("{{if true}}{{reference_error}}{{/if}}",testData),ReferenceError),test_handler("errors are passed back correctly (type)",R("{{if true}}{{type_error}}{{/if}}",testData),TypeError)}),test("{{tmpl() template}}",function(){jQuery.template("test",'${ "test text" }'),test_handler("simple include",R('{{tmpl "test"}}'),"test text"),jQuery.template("test2","{{each arr}}[${ $value }]-{{/each }}"),test_handler("data access",R('{{tmpl "test2"}}',testData),"[AA]-[BB]-[CC]-");var a={foo:"bar"};jQuery.template("nested",'{{tmpl "nested0"}}'),jQuery.template("nested0","${ foo }"),test_handler("nested - 1 level",R('{{tmpl "nested"}}',a),"bar"),jQuery.template("nested0",'{{tmpl "nested1"}}'),jQuery.template("nested1",'{{tmpl "nested2"}}'),jQuery.template("nested2","${ foo }"),test_handler("nested - 2 levels",R('{{tmpl "nested" }}',a),"bar"),a={foo:{bar:{sweet:1}}},jQuery.template("nested2","${ foo.bar.sweet }"),test_handler("nested - 2 levels - complex data",R('{{tmpl "nested" }}',a),"1"),jQuery.template("test","${ $index }"),jQuery.template("test","${ n }"),jQuery.template("test","${ item }")}),test("Html Output Unecoded {{html }}",function(){}),module("Script Tag Caching"),test("Template Reuse",function(){var a=$("#reuse"),b={data:"pass1"},c=a.tmpl(b).html();b={data:"pass2"};var d=a.tmpl(b).html();ok("simple reuse test",c=="pass1"&&d=="pass2")})